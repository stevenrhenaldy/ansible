---
- name: Install ContainerD, runc and CNI plugins on Ubuntu 20.04
  hosts: 
    - control_plane
    - workers_ubuntu
  become: true
  vars_files: 
    - secret.yml
    - variables.yml

  tasks:
    - name: Test Connection
      ping:
    
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Install required packages
      apt: 
        name: "{{ item }}"
        state: latest
        update_cache: yes
      loop: "{{required_packages}}"

#! === containerD ===

    - name: Check and delete containerd tarball if it exists
      file:
        path: "/home/{{ user }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
        state: absent

    - name: Downlaod the containerd file 
      get_url:
        url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
        dest: "/home/{{ user }}"
    
    # unarchive -> module in Ansible is specifically designed to handle the extraction of tar files
    - name: Extract containerd file
      unarchive:
        src: /home/{{ user }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz
        dest: /usr/local
        remote_src: yes

    #* Setting systemd for containerd
    - name: Download containerd service
      get_url: 
        url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        dest: /home/{{ user }}
    
    - name: Create systemd directory containerd service
      file:
        path: /usr/local/lib/systemd/system
        state: directory
        mode: '0755'
    
    - name: Copy containerd service to systemd directory
      copy:
        src: /home/{{ user }}/containerd.service
        dest: /usr/local/lib/systemd/system/containerd.service
        remote_src: yes

    - name: Set permissions on containerd service file
      file:
        path: /usr/local/lib/systemd/system/containerd.service
        owner: root
        group: root
        mode: '0755'

    - name: Reload systemd to recognize new unit file
      systemd:
        daemon_reload: yes
    
    - name: Enable and start containerd service
      systemd:
        name: containerd
        enabled: yes
        state: started
    
#! === runc ===

    - name: Download runc service
      get_url: 
        url: https://github.com/opencontainers/runc/releases/download/v1.1.13/runc.amd64
        dest: /home/{{ user }}
    
    - name: Install runc
      copy: 
        src: /home/{{ user }}/runc.amd64
        dest: /usr/local/sbin/runc
        remote_src: yes
        mode: 0755
    
#! === CNI ===

    - name: Download CNI plugins
      get_url:
        url: https://github.com/containernetworking/plugins/releases/download/v1.5.0/cni-plugins-linux-amd64-v1.5.0.tgz
        dest: /home/{{ user }}
    
    - name: Create systemd directory CNI
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'

    - name: Extract CNI file
      unarchive:
        src: /home/{{ user }}/cni-plugins-linux-amd64-v1.5.0.tgz
        dest: /opt/cni/bin
        remote_src: yes
    
    - name: Check containerd installation and check version
      command: ctr version
      register: ctr_version

    - name: Print ctr version 
      debug:
        msg: "{{ ctr_version.stdout_lines }}"

    - name: Check available Docker images
      command: ctr image ls
      register: image_ls

    - name: Print available Docker images
      debug:
        msg: "{{ image_ls.stdout_lines }}"
    
    - name: Check running containers
      command: runc list
      register: runc_list

    - name: Print running containers
      debug:
        msg: "{{ runc_list.stdout_lines }}"

    - name: Default configuration of containerd
      shell: containerd config default
    
    - name: Ensure containerd installed and accessible
      shell: which containerd
      register: ensure_containerd
    
    - name: Create the configuration directory for containerd
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'
        owner: root
        group: root
      become: true

    - name: Generate the configuration file for containerd
      shell: containerd config default
      register: containerd_config
      become: true
    
    - name: Write the containerd configuration to file
      copy:
        dest: /etc/containerd/config.toml
        content: "{{ containerd_config.stdout }}"
        owner: root
        group: root
        mode: '0755'
      become: true
    
    - name: Modify SystemdCgroup=false to true
      shell: sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
    
    - name: Restart containerd to apply changes
      shell: sudo systemctl restart containerd