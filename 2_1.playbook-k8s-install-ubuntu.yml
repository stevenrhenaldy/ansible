---
- name: Install Kubernetes in Ubuntu
  hosts:
  - control_plane
  - workers_ubuntu
  become: true
  vars_files:
    - variables.yml
    - secret.yml

  tasks:
    - name: Test Connection
      ping:

#! === Pre-Installation K8s ===

    - name: Disable swap
      command: swapoff -a
    
    - name: Disable swap in /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^(.+?\s+swap\s+sw\s+.+?)$'
        replace: '#\1'
    
    - name: Modify the nameserver in resolv.conf
      replace:
        path: /etc/resolv.conf
        regexp: '^(.+?\s+nameserver\s+.+?)$'
        replace: 'nameserver 8.8.8.8 8.8.4.4'
    
    - name: Update apt packages 
      become: true
      become_user: root
      apt:
        upgrade: yes
        update_cache: yes

    - name: Create iptables rule file for K8s (1/2)
      file:
        path: /etc/modules-load.d/k8s.conf
        state: touch
        mode: 0755

    - name: Ensure iptables tooling does not use the nftables backend
      lineinfile:
        path: /etc/modules-load.d/k8s.conf
        state: present
        create: yes
        line: |
          overlay
          br_netfilter

    - name: Load the 'overlay' kernel module
      command: modprobe overlay
      become: true

    - name: Load the 'br_netfilter' kernel module
      command: modprobe br_netfilter
      become: true
    
    - name: Create iptables rule file for K8s (2/2)
      file:
        path: /etc/sysctl.d/k8s.conf
        state: touch
        mode: 0755

    - name: Empty file content /etc/sysctl.d/k8s.conf
      copy:
        content: ""
        dest: /etc/sysctl.d/k8s.conf

    - name: Ensure iptables tooling does not use the nftables backend
      lineinfile:
        path: /etc/sysctl.d/k8s.conf
        state: present
        create: yes
        line: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward                = 1
    
    - name: Apply sysctl params
      command: sysctl --system

    - name: List and filter specific kernel modules
      shell: lsmod | egrep 'br_netfilter|overlay'
      register: kernel_modules

    - name: Display filtered kernel modules
      debug:
        msg: "{{ kernel_modules.stdout_lines }}"

    - name: Check sysctl settings for netfilter and IP forwarding
      shell: sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
      register: sysctl_settings

    - name: Display sysctl settings
      debug:
        msg: "{{ sysctl_settings.stdout_lines }}"

#! === Installation K8s ===

    - name: Update apt packages (1/2)
      become: true
      apt:
        # upgrade: yes
        update_cache: yes
      
    - name: Install necessary packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
        state: present
        update_cache: yes
      become: true
    
    - name: Create directory for apt keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: 0755

    - name: Download Kubernetes Release Key and convert to GPG keyring
      shell: >
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    
    - name: Download Kubernetes Release Key and convert to GPG keyring
      shell: >
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
    
    - name: Update apt packages (2/2)
      become: true
      apt:
        # upgrade: yes
        update_cache: yes

    - name: Install Kubernetes packages
      become: true
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
        allow_downgrades: true
      loop: "{{ kubernetes_engines_ubuntu }}"

    - name: Hold Kubernetes packages
      become: true
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop: "{{k8s_package_ubuntu}}"
    
    - name: Check kubeadm version
      command: kubeadm version
      register: kubeadm_version
    
    - name: Print kubeadm version
      debug:
        msg: "{{ kubeadm_version.stdout }}"

    - name: Check kubelet version
      command: kubelet --version
      register: kubelet_version

    - name: Print kubelet version
      debug:
        msg: "{{ kubelet_version.stdout }}"
    
    - name: Check kubectl version
      command: kubectl version --client
      register: kubectl_version 
    
    - name: Print kubectl version
      debug:
        msg: "{{ kubectl_version.stdout }}"
